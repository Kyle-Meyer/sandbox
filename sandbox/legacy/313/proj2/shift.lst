     1                                  %define STDOUT 1
     2                                  %define SYSCALL_EXIT 60	
     3                                  %define SYSCALL_WRITE 1
     4                                  	section .data
     5 00000000 0A7468617420697320-     shiftEr: db	10, "that is an invalid value (0-25) ", 10, 0
     5 00000009 616E20696E76616C69-
     5 00000012 642076616C75652028-
     5 0000001B 302D323529200A00   
     6 00000023 0A00                    newLine: db	10, 0
     7 00000025 0A4865726520697320-     shiftMsg: db	10, "Here is your shifted message: " , 10, 0
     7 0000002E 796F75722073686966-
     7 00000037 746564206D65737361-
     7 00000040 67653A200A00       
     8 00000046 0A706C656173652065-     numMsg:	db	10, "please enter the amount of bits to shift by", 10, 0
     8 0000004F 6E7465722074686520-
     8 00000058 616D6F756E74206F66-
     8 00000061 206269747320746F20-
     8 0000006A 73686966742062790A-
     8 00000073 00                 
     9                                  
    10                                  	section .bss
    11 00000000 <res 00000006>          useS:	resb	6
    12                                  	section .text
    13                                  	global	shift
    14                                  
    15                                  
    16                                  ;;; the start
    17                                  shift:
    18 00000000 4889FB                  	mov	rbx, rdi	;copy the input pointer to rbx
    19 00000003 E8A8000000              	call	getShift
    20 00000008 4889DF                  	mov	rdi, rbx	;copy back to rdi for the shifting loop
    21 0000000B 4831D2                  	xor	rdx, rdx	;start at 0
    22                                  
    23                                  ;;; the shifting loop, move through our string and for each alphabetical, apply a shift, re copy the bit shift with each loop back into rcx just to be safe 
    24                                  looper:			;start our loop function
    25                                  
    26 0000000E 4D31D2                  	xor	r10, r10
    27 00000011 4D31C0                  	xor	r8, r8
    28 00000014 4831C9                  	xor 	rcx, rcx
    29 00000017 803F00                  	cmp	[rdi], byte 0
    30 0000001A 741B                    	je 	end_counter
    31 0000001C 4883FA1F                	cmp	rdx, 31
    32 00000020 7415                    	je	end_counter
    33 00000022 488B0C25[00000000]      	mov	rcx, [useS]
    34 0000002A E818000000              	call	distinguish	;to check for lower case v upper case
    35 0000002F 48FFC2                  	inc	rdx
    36 00000032 48FFC7                  	inc	rdi
    37 00000035 EBD7                    	jmp	looper
    38                                  
    39                                  
    40                                  ;;; the end of our shift encrypt, we dont need to pass anything to rax since we we've already done our modifications
    41                                  end_counter:
    42                                         
    43 00000037 48BF-                   	mov	rdi, newLine
    43 00000039 [2300000000000000] 
    44 00000041 E8D0000000              	call	print
    45 00000046 C3                              ret
    46                                  	
    47                                  distinguish:
    48 00000047 803F3C                  	cmp	[rdi], byte 60	;see if we are above A
    49 0000004A 7D01                    	jge	upperCase	;if so move to the next check
    50 0000004C C3                      	ret
    51                                  	
    52                                  upperCase:
    53 0000004D 803F5A                  	cmp	[rdi], byte 90	;check to see if we are between A and Z
    54 00000050 7634                    	jbe	checkUpper	;if so run the standard check for applying the shift
    55 00000052 EB00                    	jmp	lowerCase	;if not then it must be greater in ASCII value so we should see if its lower case
    56                                  
    57                                  lowerCase:
    58 00000054 803F61                  	cmp	[rdi], byte 97	;make sure that its at a
    59 00000057 7D01                    	jge	evenLowerCase	;if so move to the upper bounding check
    60 00000059 C3                      	ret			;if not then its a bracket of some kind and we should return
    61                                  
    62                                  evenLowerCase:
    63 0000005A 803F7A                  	cmp	[rdi], byte 122	;make sure that its below or equal to lower z
    64 0000005D 7608                    	jbe	checkLower	; if so we can proceed to applying the shift
    65 0000005F C3                      	ret
    66                                  
    67                                  ;;; after all is said and done, we now apply our offeste to the current character in the string
    68                                  applyOffset:
    69                                  	
    70 00000060 4D29C2                  	sub	r10, r8
    71 00000063 4C0117                  	add	[rdi], r10
    72 00000066 C3                      	ret
    73                                  ;;; see if we are within range for the lower case alphabet, first check starting at lower case a
    74                                  checkLower:
    75 00000067 803F61                  	cmp	[rdi], byte 97
    76 0000006A 7D01                    	jge	checkLowerMax
    77 0000006C C3                      	ret
    78                                  
    79                                  ;;; second part of the lower case check, if we are above lower case z then we are out of bounds and must "correct" our offset
    80                                  checkLowerMax:
    81 0000006D 4C0FBE17                	movsx	r10, byte [rdi]
    82 00000071 4C0FBE07                	movsx	r8, byte [rdi]
    83 00000075 4901CA                  	add	r10, rcx
    84 00000078 4983FA7A                	cmp	r10, 122
    85 0000007C 7F02                    	jg	lowerCorrect
    86 0000007E EBE0                    	jmp	applyOffset
    87                                  
    88                                  ;;; correcting the offset, we just subtract out 25 so that we can "start" back at lower case A
    89                                  lowerCorrect:
    90 00000080 4983EA19                	sub	r10, 25
    91 00000084 EBDA                    	jmp	applyOffset
    92                                  
    93                                  ;;; check to see if we are in range of the upper case alphabet, if above or equal to upper case A , continue
    94                                  checkUpper:	
    95                                  	
    96 00000086 803F41                  	cmp     [rdi], byte 65
    97 00000089 7D01                            jge     checkUpperMax
    98 0000008B C3                      	ret
    99                                  ;;; second check to see if we are within range of the upper case alphabet, if we are above captial Z then we are out of bounds and must apply a correction to our offset
   100                                  checkUpperMax:
   101 0000008C 4C0FBE17                	movsx   r10, byte [rdi]
   102 00000090 4C0FBE07                	movsx   r8, byte [rdi]
   103 00000094 4901CA                  	add     r10, rcx
   104 00000097 4983FA5A                        cmp     r10, 90
   105 0000009B 7FE3                            jg      lowerCorrect
   106 0000009D EBC1                    	jmp	applyOffset
   107                                  
   108                                  ;;; standard error for if user entered an offset greater than 25 or ower than 0
   109                                  shiftError:
   110 0000009F 48BF-                   	mov	rdi, shiftEr
   110 000000A1 [0000000000000000] 
   111 000000A9 E868000000              	call	print
   112 000000AE EB00                    	jmp	getShift
   113                                  
   114                                  	
   115                                  ;;; getting our useres desired shift amount, we read in the string version of the number they desire, then move into the loop portion to convert it into a number
   116                                  getShift:
   117 000000B0 48BF-                   	mov 	rdi, numMsg
   117 000000B2 [4600000000000000] 
   118 000000BA E857000000              	call 	print
   119                                  	
   120 000000BF B800000000                      mov     rax, 0
   121 000000C4 BF00000000                      mov     rdi, 0
   122 000000C9 48BE-                           mov     rsi, useS
   122 000000CB [0000000000000000] 
   123 000000D3 BA03000000                      mov     rdx, 3
   124 000000D8 0F05                    	syscall
   125 000000DA 48BE-                   	mov	rsi, useS
   125 000000DC [0000000000000000] 
   126 000000E4 4831D2                  	xor 	rdx, rdx
   127                                  
   128                                  ;;; this loop works on the way contents are stored in a register, and that is by LSB to MSB, so when we move '26'for example into our register, it gets stored as '62', meaning we can apply a formula where we subtrac
   129                                  shiftLoop:
   130 000000E7 480FBE06                	movsx	rax, byte [rsi] ;grab the character
   131 000000EB 48FFC6                  	inc	rsi
   132 000000EE 4883F80A                	cmp	rax, 10 	;see if its a new line, if it is, we are done
   133 000000F2 740D                    	je	endShift
   134 000000F4 4883E830                	sub	rax, 48		;offset the value to make it a regular 1-9 int
   135 000000F8 486BD20A                	imul	rdx, 10		;multiply by our factor of 10
   136 000000FC 4801C2                  	add	rdx, rax	;add everything to our running total
   137 000000FF EBE6                    	jmp	shiftLoop
   138                                  
   139                                  	
   140                                  ;;; the end of getting our shift amount, if its above 25, or below 0, then its illegal and will reprompt the user for input
   141                                  endShift:
   142 00000101 4883FA19                	cmp	rdx, 25
   143 00000105 7F98                    	jg	shiftError
   144 00000107 4883FA00                	cmp	rdx, 0
   145 0000010B 7C92                    	jl	shiftError
   146 0000010D 48891425[00000000]      	mov	[useS], rdx
   147 00000115 C3                      	ret
   148                                  
   149                                  
   150                                  ;;; standard print loop for static messages
   151                                  print:
   152 00000116 4889F8                          mov     rax, rdi	;95;0c
   153 00000119 4831D2                          xor     rdx, rdx
   154                                  
   155                                  count:
   156 0000011C 803F00                          cmp     [rdi], byte 0   ;null character?
   157 0000011F 7408                            je      end_count
   158 00000121 48FFC2                          inc     rdx
   159 00000124 48FFC7                          inc     rdi
   160 00000127 EBF3                            jmp     count
   161                                  
   162                                  end_count:
   163 00000129 4889C6                          mov     rsi, rax
   164 0000012C B801000000                      mov     rax, SYSCALL_WRITE
   165 00000131 BF01000000                      mov     rdi, STDOUT
   166 00000136 0F05                            syscall
   167                                  
   168 00000138 C3                              ret
   169                                  breaker:
   170 00000139 C3                      	ret
